---

- name: Freeipa-client | unconfigure client
  ansible.builtin.import_tasks: freeipa-reset-client.yml
  when:
   - reset_ipa is defined
   - reset_ipa

- name: Freeipa-client | retrieve masters ip
  ansible.builtin.setup:
  register: ipamasterssetup
  delegate_facts: true
  delegate_to: "{{ groups[idm_group][0] }}" # TODO concat all masters IPs

- name: Freeipa-client | debug masters ip
  ansible.builtin.debug:
    msg: "{{ ipamasterssetup }}"
    verbosity: 2

- name: Freeipa-client | compute master ip if preferred_nic is not set
  ansible.builtin.debug:
    msg: "{{ ipamasterssetup.ansible_facts['ansible_' + preferred_nic].ipv4.address if preferred_nic is defined else ipamasterssetup.ansible_facts.ansible_default_ipv4.address | default(ipamasterssetup.ansible_facts.ansible_all_ipv4_addresses[0]) }}"
  register: idm_master_ip

- name: Freeipa-client | Debug idm groups variable
  ansible.builtin.debug:
    msg: "{{ groups[idm_group] }}"
    verbosity: 2

- name: Freeipa-client | compute client hostname
  ansible.builtin.debug:
    msg: "{{ hostname | default(securehost_current_hostname.stdout if securehost_current_hostname.stdout.endswith(company_domain) else idm_client_default_domain_prefix + '.' + company_domain) }}"
  register: securehost_freeipa_client_host

- name: Freeipa-client | retrieve current machine ip
  ansible.builtin.setup:
  register: idm_host_facts
  delegate_to: "{{ groups[idm_group][0] }}"
  delegate_facts: true

- name: Freeipa-client | compute ip if preferred_nic is not set
  ansible.builtin.debug:
    msg: "{{ idm_host_facts.ansible_facts['ansible_' + preferred_nic].ipv4.address if preferred_nic is defined else idm_host_facts.ansible_facts.ansible_default_ipv4.address | default(idm_host_facts.ansible_facts.ansible_all_ipv4_addresses[0]) }}"
  register: idm_host_ip

- name: "Freeipa-client | add master hostname {{ groups[idm_group][0] | default(idm_server_default_domain_prefix + '.' + company_domain) }} {{ idm_host_ip.msg | ansible.utils.ipv4 }} entry in client etc/hosts"
  ansible.builtin.include_role:
    name: tcharl.ansible_hostname
  vars:
    hostname: "{{ securehost_freeipa_client_host.msg }}"
    hostname_reboot: false
    ansible_become: true
  tags:
    - standalone

- name: "Freeipa-client | add master hostname {{ groups[idm_group][0] | default(idm_server_default_domain_prefix + '.' + company_domain) }} {{ idm_host_ip.msg | ansible.utils.ipv4 }} entry in client etc/hosts"
  ansible.builtin.include_role:
    name: tcharl.etchost_append
  vars:
    hostname_reboot: false
    ansible_become: true
    skip_ipa: True
    hosts_entries:
      - name: "{{ hostvars[groups[idm_group][0]].hostname | default(groups[idm_group][0] | default(idm_server_default_domain_prefix + '.' + company_domain)) }}"
        ip: "{{ idm_host_ip.msg | ansible.utils.ipv4 }}"
  tags:
    - standalone

- name: Freeipa-client | debug ipa server hostname
  ansible.builtin.debug:
    msg: "{{ [hostvars[groups[idm_group][0]].hostname | default(groups[idm_group] | default(idm_server_default_domain_prefix + '.' + company_domain))] | flatten }}"
    verbosity: 2

- name: Freeipa-client | install freeipa-client
  ansible.builtin.include_role:
    name: freeipa.ansible_freeipa.ipaclient
  vars:
    # ipaclients: "{{ groups[idm_client_group] | list }}"
    ipaadmin_principal: "{{ company_realm_principal }}"
    ipaadmin_password: "{{ company_realm_password }}"
    ipaserver_domain: "{{ company_domain }}"
    ipaserver_realm: "{{ company_domain | upper }}"
    ipaclient_servers: "{{ [hostvars[groups[idm_group][0]].hostname | default(groups[idm_group] | default(idm_server_default_domain_prefix + '.' + company_domain))] | flatten }}"
    ipaclient_force_join: yes
    ipaclient_hostname: "{{ securehost_freeipa_client_host.msg }}"
    ipaclient_ip_addresses: "{{ [ idm_master_ip.msg | ansible.utils.ipv4 ] }}"
    ipaclient_no_ntp: "{{ True if (ansible_facts['virtualization_type'] is defined and ansible_facts['virtualization_type'] in ['container']) else False }}"
    # ipaclient_all_ip_addresses: True
    ipaclient_allow_repair: yes
    ansible_become: true

- name: Freeipa-client | create ipa host
  freeipa.ansible_freeipa.ipahost:
    ipaadmin_password: "{{ company_realm_password }}"
    name: "{{ securehost_freeipa_client_host.msg }}"
    ip_address: "{{ securehost_current_host_ip.msg }}"
  no_log: "{{ secure_logs }}"
  delegate_to: "{{ groups[idm_group][0] }}"

##### Commands for testing
#### kinit admin
### ipa user-find
### ipa user-add yume --first=yume --last=sensei --email=yume@senzei.io  --shell=/bin/bash --password
